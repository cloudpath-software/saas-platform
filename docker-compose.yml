version: '3.9'
x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
networks:
  default:
    name: cloudpath-net
    driver: bridge
services:
  #  Cache used by the api gateway to retreive allowed cors domains, hosting service to improve site load time & other.
  redis:
    image: redis:7.0-alpine
    restart: unless-stopped
    container_name: cache
    command: redis-server --save 20 1 --loglevel warning --requirepass admin
    deploy:
      resources:
        limits:
          memory: 20M
    ports:
      - "${REDIS_PORT}"
    volumes:
      - cache-data:/data
    logging: *logging
  #  Discovery service used to client-side load balance requests & make requests to healthy instances.
  discovery:
    image: consul:1.15.4
    container_name: discovery
    restart: unless-stopped
    ports:
      - "${CONSUL_SERVICE_PORT}"
    logging: *logging

  # Rabbitmq used by services to manage async events (org creation, sending an email, etc.)
  rabbitmq:
    image: rabbitmq:3.12.8-management-alpine
    container_name: messaging
    restart: unless-stopped
    volumes:
      - messaging-data:/var/lib/rabbitmq/
      - messaging-logs:/var/log/rabbitmq
    ports:
      - 5672:5672
      - "${RABBITMQ_PORT}"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}

  # ********************
  # Telemetry Components
  # ********************
  # Jaeger
  tracing:
    image: jaegertracing/all-in-one:latest
    container_name: tracing
    command:
      - "--memory.max-traces"
      - "10000"
      - "--query.base-path"
      - "/jaeger/ui"
      - "--prometheus.server-url"
      - "http://${PROMETHEUS_ADDR}"
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${JAEGER_SERVICE_PORT}"         # Jaeger UI
      - "4317"                           # OTLP gRPC default port
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
    logging: *logging

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml" ]
    volumes:
      - ./config/otel/otelcol-config.yml:/etc/otelcol-config.yml
      - ./config/otel/otelcol-observability.yml:/etc/otelcol-observability.yml
    ports:
      - "4317:4317"     # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint
      - "55679:55679"   # zpages endpoint
    logging: *logging
    
  # Grafana
  loki:
    container_name: loki
    image: grafana/loki:2.9.2
    volumes:
      - ./config/grafana/loki/loki-config.yml:/etc/loki/config.yml
    # ports:
    #   - "3100:3100"
    command: -config.file=/etc/loki/config.yml

  tempo:
    image: grafana/tempo:2.3.0
    container_name: tempo
    command: [ "-config.file=/etc/config.yml" ]
    volumes:
      - ./config/grafana/tempo/config.yml:/etc/config.yml
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"  # otlp grpc

  promtail:
    container_name: promtail
    image: grafana/promtail:2.9.2
    volumes:
      - ./config/grafana/promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml

  grafana:
    image: grafana/grafana:10.2.1
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    volumes:
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
    ports:
      - "${GRAFANA_SERVICE_PORT}"
    logging: *logging

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    deploy:
      resources:
        limits:
          memory: 300M

  # ********************
  # Public services
  # ********************

  api-gateway:
    image: ${IMAGE_NAME}/api-gateway:latest
    container_name: internal-spa-bff
    restart: unless-stopped
    depends_on:
      discovery:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - 443:443

  public-spa-bff:
    image: ${IMAGE_NAME}/publc-spa-bff:latest
    container_name: public-spa-bff
    restart: unless-stopped
    depends_on:
      discovery:
        condition: service_started
      redis:
        condition: service_started

  public-oauth2:
    image: ${IMAGE_NAME}/publc-oauth2-service:latest
    container_name: public-oauth2
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      discovery:
        condition: service_started
      redis:
        condition: service_started

  # ********************
  # Internal services
  # ********************

  internal-api-gateway:
    image: ${IMAGE_NAME}/internal-api-gateway:latest
    container_name: internal-api-gateway
    restart: unless-stopped
    depends_on:
      - discovery
    ports:
      - 80:80
  internal-spa-bff:
    image: ${IMAGE_NAME}/internal-spa-bff-serivce:latest
    container_name: internal-spa-bff
    restart: unless-stopped
    depends_on:
      - discovery

  #********************
  #Resource services
  #********************

  authorization:
    image: ${IMAGE_NAME}/authorization-service:latest
    restart: unless-stopped
    depends_on:
      public-oauth2:
        condition: service_started
  cdn:
    image: ${IMAGE_NAME}/cdn-service:latest
    container_name: content-delivery
    restart: unless-stopped
    depends_on:
      core:
        condition: service_started
  core:
    image: ${IMAGE_NAME}/core-service:latest
    container_name: core
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_started
      public-oauth2:
        condition: service_started
      cdn:
        condition: service_started
  admin:
    image: ${IMAGE_NAME}/admin-service:latest
    container_name: admin
    restart: unless-stopped
    depends_on:
      core:
        condition: service_started
  internal:
    image: ${IMAGE_NAME}/internal-service:latest
    container_name: internal
    restart: unless-stopped
    depends_on:
      core:
        condition: service_started
      hosting:
        condition: service_started
  start:
    image: ${IMAGE_NAME}/start-service:latest
    container_name: start
    restart: unless-stopped
    depends_on:
      internal:
        condition: service_started
  hosting:
    image: ${IMAGE_NAME}/hosting-service:latest
    container_name: hosting
    restart: unless-stopped
    depends_on:
      core:
        condition: service_started
      telemetry:
        condition: service_started
  telemetry:
    image: ${IMAGE_NAME}/telemetry-service:latest
    container_name: telemetry
    restart: unless-stopped
    depends_on:
      core:
        condition: service_started
  db:
    image: postgres:15.4
    restart: unless-stopped
    container_name: db
    command: postgres -c 'max_connections=200'
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: "oauth,core,internal,content_delivery,hosting,start,telemetry"
    volumes:
      - ./config/db/postgres/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/db_init.sh
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - ${DATABASE_PORT}:5432
volumes:
  cache-data:
    driver: local
  messaging-data:
    driver: local
  messaging-logs:
    driver: local
  db-data:
    driver: local
  prometheus-data:
    driver: local
